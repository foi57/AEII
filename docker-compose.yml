version: '3.8' # 建议使用较新版本

services:
  mysql:
    image: mysql:8.0
    container_name: AEII_MySQL
    restart: always # 建议添加重启策略
    ports:
      - "3308:3306" # 将宿主机的 3308 端口映射到容器的 3306 端口
    command: --default-authentication-plugin=mysql_native_password
    environment:
      MYSQL_ROOT_PASSWORD: password # 从 application.yml 获取
      MYSQL_DATABASE: AEII # 创建数据库（如果需要）
    volumes:
      - mysql-data:/var/lib/mysql # 使用命名卷替代绑定挂载，更推荐
      # 如果需要初始化脚本，可以挂载 .sql 文件
      # - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks: # 定义网络
      - app-network

  backend:
   
    container_name: AEII_Backend
    build:
      context: . # Dockerfile.backend 在当前目录
      dockerfile: Dockerfile.backend
    restart: always
    ports:
      - "0.0.0.0:9091:9091" # 将宿主机的 9091 端口映射到容器的 9091 端口
    depends_on: # 确保 MySQL 先启动
      - mysql
    environment:
      # 覆盖 application.yml 中的数据库连接地址，使用服务名 mysql
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/AEII?characterEncoding=utf8&useSSL=false
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: password
      # 其他可能需要的环境变量，如 JWT 密钥等
      # JWT_SECRET: yourjwtsecretkeydsafsafdadafgsgkmld9430jfow8ty382jwfoibewgfnmdsi983wdmaliskbdfi3qgdjpjajdkjlagsyjd8i2q8odp9jawbdbais
    networks:
      - app-network

  frontend:

    container_name: AEII_Frontend
    build:
      context: ./vue # Dockerfile.frontend 在 vue 目录
      dockerfile: Dockerfile.frontend
    restart: always
    ports:
      - "0.0.0.0:6175:80" # 将宿主机的 6175 端口映射到容器的 80 端口 (Nginx 默认端口)
    depends_on:
      - backend # 前端依赖后端
    networks:
      - app-network
    # 如果需要 Nginx 配置来代理 API 请求到后端:
    # volumes:
    #   - ./vue/nginx.conf:/etc/nginx/conf.d/default.conf

volumes: # 定义命名卷
  mysql-data:

networks: # 定义网络
  app-network:
    driver: bridge